<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="PublicationWorkflow.Overview" locale="">
  <web>PublicationWorkflow</web>
  <name>Overview</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>PublicationWorkflow.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>$services.localization.render('workflow.overview.title')</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
#* display all documents in a given workflow state.
 * @param $status the status in which the displayed workflow documents should be
*#
#macro(documentsForStatus $status)
#set($cols = ['doc.title', 'doc.location', 'status', 'doc.author', 'doc.date' ])
#set($colProperties = {
  'doc.title' : {'link' : 'auto' },
  'doc.location' : {'html' : true, 'sortable' : true, 'filterable' : true},
  'doc.author' : {'link' : 'author', 'sortable' : true, 'filterable' : true},
  'doc.date' : {'sortable' : true, 'filterable' : true},
  'status' : {'type' : 'hidden'}
})
#set($options = {
  'className' : 'PublicationWorkflow.PublicationWorkflowClass',
  'extraParams' : "status=$escapetool.url($status)",
  'translationPrefix' : 'workflow.overview.',
  'queryFilters' : 'unique'
})
#livetable("${status}docs" $cols $colProperties $options)
#end

#set($xwqlstatement = "from doc.object('PublicationWorkflow.PublicationWorkflowClass') as workflow where workflow.istarget=0 and workflow.status = :status")

#if($request.moderateAll == 'true')
  #set($moderating = $request.getParameterValues('docNames'))
  #if($request.get('evenIfNotShown'))
     #set($moderating = $services.query.xwql($xwqlstatement).bindValue('status','moderating').addFilter("unique").execute())
  #end
  #set($fail = 0)
  #foreach($document in $moderating)
    #set($xdoc = $xwiki.getDocument($document))
    #set($docRef = $xdoc.getDocumentReference())
    #set($result = $services.publicationworkflow.submitForValidation($docRef))
    #if(!$result)
      * {{warning}}$services.localization.render('workflow.overview.failValidate',[$xdoc]){{/warning}}
      #set($fail = 1)
    #end
  #end
  #if($fail == 0)

    {{info}}$services.localization.render('workflow.overview.successValidate'){{/info}}
  #end
#elseif($request.publishAll == 'true')
  #set($validating = $request.getParameterValues('docNames'))
  #if($request.get('evenIfNotShown'))
     #set($validating = $services.query.xwql($xwqlstatement).bindValue('status','validating').addFilter("unique").execute())
  #end
  #set($fail = 0)
  #foreach($document in $validating)
    #set($xdoc = $xwiki.getDocument($document))
    #set($docRef = $xdoc.getDocumentReference())
    #set($result = $services.publicationworkflow.publish($docRef))
    #if(!$result)
      * {{warning}}$services.localization.render('workflow.overview.failPublish',[$xdoc]){{/warning}}
      #set($fail = 1)
    #end
  #end
  #if($fail == 0)

    {{info}}$services.localization.render('workflow.overview.successPublish'){{/info}}
  #end
#end

== $services.localization.render('workflow.overview.listDrafts') ==
#documentsForStatus("draft")

== $services.localization.render('workflow.overview.listModerating') ==
#documentsForStatus("moderating")
{{html}}
    &lt;form action='' method='post' class="xFormInline" id="validationForm" style='float:right; display:none'&gt;
      &lt;input type='hidden' name='moderateAll' value='true'/&gt;&lt;span class="hidden"&gt;&lt;/span&gt;
      &lt;span class='buttonwrapper'&gt;
        &lt;input type='submit' class='button' value="$services.localization.render('workflow.overview.validateAll')"/&gt;
      &lt;/span&gt;
      &lt;label for='validateEvenIfNotShown'&gt;&lt;input type='checkbox' id='validateEvenIfNotShown' name='evenIfNotShown' /&gt;$services.localization.render('workflow.overview.evenIfNotShown')&lt;/label&gt;
    &lt;/form&gt;
{{/html}}
(% id="moderatingNone" style="display:none" %)
//$services.localization.render('workflow.overview.noModerationDoc')//

(% class='clearfloats' %)

== $services.localization.render('workflow.overview.listValidating') ==
#documentsForStatus("validating")
{{html}}
    &lt;form action='' method='post' class="xFormInline" id="publishForm" style='float:right; display:none'&gt;
      &lt;input type='hidden' name='publishAll' value='true'/&gt;&lt;span class="hidden"&gt;&lt;/span&gt;
      &lt;span class='buttonwrapper'&gt;
        &lt;input type='submit' class='button' value="$services.localization.render('workflow.overview.publishAll')"/&gt;
      &lt;/span&gt;
      &lt;label for='publishEvenIfNotShown'&gt;&lt;input type='checkbox' id='publishEvenIfNotShown' name='evenIfNotShown' /&gt;$services.localization.render('workflow.overview.evenIfNotShown')&lt;/label&gt;
    &lt;/form&gt;
{{/html}}
(% id="validatingNone" style="display:none" %)
//$services.localization.render('workflow.overview.noWebmasterDoc')//

== $services.localization.render('workflow.overview.listValid') ==
#documentsForStatus("valid")

{{/velocity}}</content>
  <object>
    <name>PublicationWorkflow.Overview</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>baacdf83-e926-409f-9166-d253cf558f83</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function(XWiki) {
  TableHook = Class.create({
    initialize : function(status, formId) {
      this.tableId = status + 'docs'
      this.$form = $(formId)
      if (!this.$form) {
        return;
      }
      this.$table = $(this.tableId)
      this.$empty = $(status+'None') || { 'show': function() {}, 'hide':function() {} }
      this.livetable = window['livetable_' + this.tableId ]
      this.docs = [];
      this.$extraFields = this.$form.down('span.hidden')
      this.$extraFields.show()
      var self = this;
      document.observe("xwiki:livetable:displayComplete", function(event) {
        if (event.memo.tableId != self.tableId) {
          return;
        }
        self.$extraFields.childElements().each(function(it) { it.remove() })
        self.docs = [];
        self.$table.select('td.doc_location ol').each(function(fullNameElement) {
          // rudimentary rights check: omit page if not viewable
          if (fullNameElement.down('li.active a')) {
            self.docs.push(fullNameElement.getAttribute('data-entity'))
          }
        })
        if (self.docs.length == 0) {
          self.$empty.show()
          self.$form.hide()
        } else {
          self.$empty.hide()
          self.$form.show()
        }
        self.docs.each(function(fullName){
          var docInput = new Element('input',{type:'hidden', name:'docNames', value:fullName})
          self.$extraFields.appendChild(docInput);
        })
      })
      // js / ajax handling  - not yet done
      // this.$form.on('submit', function(event) {
      //   event.stop();
      //   self.livetable.refresh();
      // });
    }
  })

  function initLivetables() {
    new TableHook('moderating','validationForm');
    new TableHook('validating','publishForm');
  }
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; initLivetables()) || document.observe("xwiki:dom:loaded", initLivetables);
})(XWiki || {})</code>
    </property>
    <property>
      <name>handle bulk actions</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
